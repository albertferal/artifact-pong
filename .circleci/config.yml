version: 2.1

orbs:
  sonarcloud: sonarsource/sonarcloud@2.0.0

executors:
  pythonpygame:
    docker:
      - image: feralbert90/pokepong1:latest  # Dockerfile que se necesita de dockerhub

jobs:
  job-tests:
    executor: pythonpygame
    steps:
      - checkout  # Para obtener el código del repositorio
      # Aquí agregamos los pasos para ejecutar tests, linting, análisis estático, etc.
      - run:
          name: Run tests
          command: | 
                    pytest Game/tests
      - run:
          name: Run linting
          command: | 
                    pylint  --exit-zero Game
      - run:
          name: Run code coverage
          command: |
                    coverage run -m pytest Game
                    coverage report -m 
      - store_test_results:
          path: Game/tests/test-results.xml
      - sonarcloud/scan

  job-vulnerability:
    executor: pythonpygame
    steps:
      - checkout
#      - restore_cache:
#          keys:
#            - node-deps-{{ .Branch }}-{{ checksum "npm-shrinkwrap.json" }}
      - run:
          name: Install Node.js and npm
          command: |
            apt-get update
            apt-get install -y nodejs npm
      - run:
          name: Install Snyk
          command: |
            npm install -g snyk
      - run:
         name: Analize with Snyc
         command: |
            export SNYK_TOKEN=$SNYK_TOKEN
            cd Game
            snyk_output=$(snyk code test)
            echo "$snyk_output"
            if echo "$snyk_output" | grep -q 'High severity vulnerabilities found'; then
              echo "Detected high severity vulnerabilities. Failing the build."
              exit 1
            else
              echo "No high severity vulnerabilities found."
            fi
#      - save_cache:
#          paths:
#            - ~/.npm
#          key: node-deps-{{ .Branch }}-{{ checksum "npm-shrinkwrap.json" }}

  job-create-deploy-artifact:
    executor: pythonpygame
    steps:
      - checkout
      - run:
          name: Install zip
          command: |
            apt-get update && apt-get install -y zip
      - run:
          name: Create artifacts directory
          command: mkdir -p artifacts
      - run:
          name: Package artifact
          command: cd Game && zip -r ../artifacts/myapp.zip ./*
#      - run:
#          name: Set Git Identity
#          command: |
#            git config user.email "albertferal@gmail.com"
#            git config user.name "albertferal"
#      - run:
#          name: Publish to GitHub
#          command: |
#            git remote set-url origin https://$GITHUB_TOKEN@github.com/albertferal/artifact-circleci.git
#            git add artifacts/myapp.zip
#            git commit -m "Agregar artefacto myapp.zip"
#            git push origin main


  job-deploy-to-kubernetes:
    docker:
      - image: alpine:latest  # Puedes usar una imagen que contenga las herramientas que necesitas
    steps:
      - checkout
      # Instalación de Minikube y kubectl en el job
      
      - run:
          name: Install Minikube
          command: |
            curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
            
      - run:
          name: Install Minikube and kubectl
          command: |
            apk add --update curl
            curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
            install minikube-linux-amd64 /usr/local/bin/minikube
            rm minikube-linux-amd64

            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
      # Configuración de Minikube y kubectl
      - run:
          name: Configure Minikube and kubectl
          command: |
            minikube start
            kubectl config use-context minikube

      # Instalación de ArgoCD en el clúster de Minikube usando Helm
      - run:
          name: Install ArgoCD
          command: |
            kubectl create namespace argocd
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
            kubectl port-forward svc/argocd-server -n argocd 8080:443 &

      # Despliegue de la aplicación usando ArgoCD (ejemplo ilustrativo)
      - run:
          name: Deploy app using ArgoCD
          command: |
            # Aquí deberías tener comandos para desplegar la aplicación con ArgoCD
            # Puedes usar comandos como `kubectl apply -f myapp.yaml`
            # O invocar la API de ArgoCD para desplegar la aplicación
workflows:
  workflow-testing:
    jobs:
      - job-tests:
          context: SonarCloud
      - job-vulnerability:
          requires:
            - job-tests
      - job-create-deploy-artifact:
          requires:
            - job-vulnerability
          filters:
            branches:
              only: main
      - job-deploy-to-kubernetes:
          requires:
            - job-create-deploy-artifact
          filters:
            branches:
              only: main